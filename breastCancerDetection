# -*- coding: utf-8 -*-
"""Untitled0.ipynb adlı not defterinin kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZgZ11S4JDQHago-9zAh5a-9YyEGwf9ai

importing dependencies
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Processing"""

breast_cancer_dataset=sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

#loading data to dataframe

data_frame = pd.DataFrame(breast_cancer_dataset.data, columns=breast_cancer_dataset.feature_names)

"""print first 5 rows"""

data_frame.head()

"""adding the 'target' column to dataframe"""

data_frame['label'] = breast_cancer_dataset.target

#print last 5 rows of the dataframe
data_frame.tail()

#number of columns and rows in the dataset
data_frame.shape

#getting some info about the data
data_frame.info()

#checking for missing values
data_frame.isnull().sum()

#statistical measıres about the data
data_frame.describe()

#checking the distributed of target variable
data_frame['label'].value_counts()

"""1--->Bening
0--->Malignant
"""

data_frame.groupby('label').mean()

#separating the features and target
X = data_frame.drop(columns='label', axis=1)
Y = data_frame['label']
print(X)

print(Y)

#spiltting data into training and test
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

#training the Logistic Regression model using training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training daata
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print("Accuracy on training data =", training_data_accuracy)

#accuracy on test daata
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print("Accuracy on test data =", test_data_accuracy)

"""Building Predictive system"""

input_data=(18.25,19.98,119.6,1040,0.09463,0.109,0.1127,0.074,0.1994,0.05742,0.4467,0.7732,3.18,53.91,0.004314,0.01382,0.02254,0.01039,0.01369,0.002179,22.88,27.66,153.2,1606,0.1442,0.2576,0.3784,0.1932,0.3063,0.08368)

#transform to numpy array
input_data_as_numpy_array = np.asanyarray(input_data)

#reshape the numpy array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print("The Breast cancer is Malignant")
else:
  print("The Breast cancer is Bening")
